import { HardhatError } from "@nomicfoundation/hardhat-errors";
import { ensureError } from "@nomicfoundation/hardhat-utils/error";
import { sleep } from "@nomicfoundation/hardhat-utils/lang";
import { getProxyUrl, getRequest, postFormRequest, shouldUseProxy, } from "@nomicfoundation/hardhat-utils/request";
export const ETHERSCAN_PROVIDER_NAME = "etherscan";
const VERIFICATION_STATUS_POLLING_SECONDS = 3;
// TODO: we need to remove the apiUrl from the chain descriptors in
// v-next/hardhat/src/internal/builtin-plugins/network-manager/chain-descriptors.ts
// and use this as the default API URL for Etherscan v2
// this.apiUrl = etherscanConfig.apiUrl ?? ETHERSCAN_API_URL;
export const ETHERSCAN_API_URL = "https://api.etherscan.io/v2/api";
export class Etherscan {
    chainId;
    name;
    url;
    apiUrl;
    apiKey;
    dispatcherOrDispatcherOptions;
    pollingIntervalMs;
    constructor(etherscanConfig) {
        this.chainId = String(etherscanConfig.chainId);
        this.name = etherscanConfig.name ?? "Etherscan";
        this.url = etherscanConfig.url;
        this.apiUrl = etherscanConfig.apiUrl ?? ETHERSCAN_API_URL;
        const proxyUrl = shouldUseProxy(this.apiUrl)
            ? getProxyUrl(this.apiUrl)
            : undefined;
        this.dispatcherOrDispatcherOptions =
            etherscanConfig.dispatcher ??
                (proxyUrl !== undefined ? { proxy: proxyUrl } : {});
        this.pollingIntervalMs =
            etherscanConfig.dispatcher !== undefined
                ? 0
                : VERIFICATION_STATUS_POLLING_SECONDS;
        if (etherscanConfig.apiKey === "") {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_API_KEY_EMPTY, {
                verificationProvider: this.name,
            });
        }
        this.apiKey = etherscanConfig.apiKey;
    }
    getContractUrl(address) {
        return `${this.url}/address/${address}#code`;
    }
    async isVerified(address) {
        let response;
        let responseBody;
        try {
            response = await getRequest(this.apiUrl, {
                queryParams: {
                    module: "contract",
                    action: "getsourcecode",
                    chainid: this.chainId,
                    apikey: this.apiKey,
                    address,
                },
            }, this.dispatcherOrDispatcherOptions);
            responseBody =
                /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                -- Cast to EtherscanGetSourceCodeResponse because that's what we expect from the API
                TODO: check if the API returns a different type and throw an error if it does */
                (await response.body.json());
        }
        catch (error) {
            ensureError(error);
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_FAILED, {
                name: this.name,
                url: this.apiUrl,
                errorMessage: error.cause instanceof Error ? error.cause.message : error.message,
            });
        }
        const isSuccessStatusCode = response.statusCode >= 200 && response.statusCode <= 299;
        if (!isSuccessStatusCode) {
            // TODO: we should consider throwing EXPLORER_REQUEST_FAILED here too
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_STATUS_CODE_ERROR, {
                name: this.name,
                url: this.apiUrl,
                statusCode: response.statusCode,
                errorMessage: responseBody.result,
            });
        }
        if (responseBody.status !== "1") {
            return false;
        }
        const sourceCode = responseBody.result[0]?.SourceCode;
        return typeof sourceCode === "string" && sourceCode !== "";
    }
    async verify(contractAddress, sourceCode, contractName, compilerVersion, constructorArguments) {
        const body = {
            contractaddress: contractAddress,
            sourceCode,
            codeformat: "solidity-standard-json-input",
            contractname: contractName,
            compilerversion: compilerVersion,
            constructorArguments,
        };
        let response;
        let responseBody;
        try {
            response = await postFormRequest(this.apiUrl, body, {
                queryParams: {
                    module: "contract",
                    action: "verifysourcecode",
                    chainid: this.chainId,
                    apikey: this.apiKey,
                },
            }, this.dispatcherOrDispatcherOptions);
            responseBody =
                /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                -- Cast to EtherscanResponse because that's what we expect from the API
                TODO: check if the API returns a different type and throw an error if it does */
                (await response.body.json());
        }
        catch (error) {
            ensureError(error);
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_FAILED, {
                name: this.name,
                url: this.apiUrl,
                errorMessage: error.cause instanceof Error ? error.cause.message : error.message,
            });
        }
        const isSuccessStatusCode = response.statusCode >= 200 && response.statusCode <= 299;
        if (!isSuccessStatusCode) {
            // TODO: we should consider throwing EXPLORER_REQUEST_FAILED here too
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_STATUS_CODE_ERROR, {
                name: this.name,
                url: this.apiUrl,
                statusCode: response.statusCode,
                errorMessage: responseBody.result,
            });
        }
        const etherscanResponse = new EtherscanVerificationResponse(responseBody);
        if (etherscanResponse.isBytecodeMissingInNetworkError()) {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_VERIFICATION_MISSING_BYTECODE, {
                url: this.apiUrl,
                address: contractAddress,
            });
        }
        if (etherscanResponse.isAlreadyVerified()) {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_ALREADY_VERIFIED, {
                contract: contractName,
                address: contractAddress,
            });
        }
        if (!etherscanResponse.isOk()) {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_VERIFICATION_REQUEST_FAILED, { message: etherscanResponse.message });
        }
        return etherscanResponse.message;
    }
    async pollVerificationStatus(guid, contractAddress, contractName) {
        let response;
        let responseBody;
        try {
            response = await getRequest(this.apiUrl, {
                queryParams: {
                    module: "contract",
                    action: "checkverifystatus",
                    chainid: this.chainId,
                    apikey: this.apiKey,
                    guid,
                },
            }, this.dispatcherOrDispatcherOptions);
            responseBody =
                /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                -- Cast to EtherscanResponse because that's what we expect from the API
                TODO: check if the API returns a different type and throw an error if it does */
                (await response.body.json());
        }
        catch (error) {
            ensureError(error);
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_FAILED, {
                name: this.name,
                url: this.apiUrl,
                errorMessage: error.cause instanceof Error ? error.cause.message : error.message,
            });
        }
        const isSuccessStatusCode = response.statusCode >= 200 && response.statusCode <= 299;
        if (!isSuccessStatusCode) {
            // TODO: we should consider throwing EXPLORER_REQUEST_FAILED here too
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.EXPLORER_REQUEST_STATUS_CODE_ERROR, {
                name: this.name,
                url: this.apiUrl,
                statusCode: response.statusCode,
                errorMessage: responseBody.result,
            });
        }
        const etherscanResponse = new EtherscanVerificationStatusResponse(responseBody);
        if (etherscanResponse.isPending()) {
            await sleep(this.pollingIntervalMs);
            return this.pollVerificationStatus(guid, contractAddress, contractName);
        }
        if (etherscanResponse.isAlreadyVerified()) {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_ALREADY_VERIFIED, {
                contract: contractName,
                address: contractAddress,
            });
        }
        if (!etherscanResponse.isOk()) {
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_VERIFICATION_STATUS_POLLING_FAILED, { message: etherscanResponse.message });
        }
        if (!(etherscanResponse.isFailure() || etherscanResponse.isSuccess())) {
            // Reaching this point shouldn't be possible unless the API is behaving in a new way.
            throw new HardhatError(HardhatError.ERRORS.HARDHAT_VERIFY.GENERAL.CONTRACT_VERIFICATION_UNEXPECTED_RESPONSE, { message: etherscanResponse.message });
        }
        return {
            success: etherscanResponse.isSuccess(),
            message: etherscanResponse.message,
        };
    }
}
class EtherscanVerificationResponse {
    status;
    message;
    constructor(response) {
        this.status = Number(response.status);
        this.message = response.result;
    }
    isBytecodeMissingInNetworkError() {
        return this.message.startsWith("Unable to locate ContractCode at");
    }
    isAlreadyVerified() {
        return (this.message.startsWith("Contract source code already verified") ||
            this.message.startsWith("Already Verified"));
    }
    isOk() {
        return this.status === 1;
    }
}
class EtherscanVerificationStatusResponse {
    status;
    message;
    constructor(response) {
        this.status = Number(response.status);
        this.message = response.result;
    }
    isPending() {
        return this.message === "Pending in queue";
    }
    isFailure() {
        return this.message === "Fail - Unable to verify";
    }
    isSuccess() {
        return this.message === "Pass - Verified";
    }
    isAlreadyVerified() {
        return (this.message.startsWith("Contract source code already verified") ||
            this.message.startsWith("Already Verified"));
    }
    isOk() {
        return this.status === 1;
    }
}
//# sourceMappingURL=etherscan.js.map